import pefile
import math
from statistics import mean
from tkinter import filedialog
import pickle


# Function to calculate entropy
def calculate_entropy(data):
    if not data:
        return 0
    entropy = 0
    for x in range(256):
        p_x = float(data.count(x)) / len(data)
        if p_x > 0:
            entropy += -p_x * math.log2(p_x)
    return entropy


pe_file_path = filedialog.askopenfilename()

resource_section_name = '.rsrc'

try:
    pe = pefile.PE(pe_file_path)
    section_entropies = []
    resource_entropies = []

    static_features = {}

    # File Header features
    file_header = pe.FILE_HEADER
    static_features['Machine'] = file_header.Machine
    static_features['Characteristics'] = file_header.Characteristics

    # Optional Header features
    optional_header = pe.OPTIONAL_HEADER
    static_features['ImageBase'] = optional_header.ImageBase
    static_features['MajorOperatingSystemVersion'] = optional_header.MajorOperatingSystemVersion
    static_features['MajorSubsystemVersion'] = optional_header.MajorSubsystemVersion
    static_features['Subsystem'] = optional_header.Subsystem
    static_features['DllCharacteristics'] = optional_header.DllCharacteristics

    # Calculate section entropy
    for section in pe.sections:
        section_data = section.get_data()
        entropy = calculate_entropy(section_data)
        section_entropies.append(entropy)
        # Calculate resource entropy
        if section.Name.decode().strip('\x00') == resource_section_name:
            section_data = section.get_data()
            r_entropy = calculate_entropy(section_data)
            resource_entropies.append(r_entropy)

    static_features['SectionsMinEntropy'] = min(section_entropies)
    static_features['SectionsMaxEntropy'] = max(section_entropies)
    static_features['SectionsMeanEntropy'] = mean(section_entropies)

    static_features['ResourcesMinEntropy'] = min(resource_entropies)
    static_features['ResourcesMaxEntropy'] = max(resource_entropies)
    static_features['ResourcesMeanEntropy'] = mean(resource_entropies)

    if hasattr(pe, 'VS_FIXEDFILEINFO'):
        version_info_size = pe.VS_FIXEDFILEINFO[0]
        static_features['VersionInformationSize'] = version_info_size.sizeof()
    else:
        static_features['VersionInformationSize'] = 0

    with open('model.pkl', 'rb') as file:
        model = pickle.load(file)
        fea_List = pickle.load(file)

    test = []
    for x in fea_List:
        test.append(static_features[x])

    p = model.predict([test])

    if p[0] == 0:
        print("Legitmate")
    else:
        print("Not Legitmate")

except pefile.PEFormatError as e:
    print(f"Error parsing PE file: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
